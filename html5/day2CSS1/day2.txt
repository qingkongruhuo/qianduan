 一、CSS介绍
    1、定义：层叠式样式表， cascading style sheet，使用符合css语法的纯文本为页面添加样式效果
       w3c组织发展维护，先学css2.1
       引入css的目的：为了达到结构与样式的分离
       好处：html书写量大大减少，提供更丰富的效果，
       举例：比如之前的有序/无序列表，table，input标签各种border 什么width，都可以省略用css来干 
    2、css的几个部分
        1、选择器 
        2、规则
            1、样式名称 多个样式之间用分号分隔
            2、样式值
        选择器{
            样式: 样式值;
        }
        分号必须写！
    3、注释：/* */
二、引入样式的四种方式
    只写css，是无法打开的，必须嵌入在html中才能发挥作用
    1、行内式\内联式
        直接用html标准属性style 定义css样式style=" 样式:值;"
        缺点：1、不能复用
             2、样式和html耦合在一起
             3、后期维护成本极高
    2、嵌入式\内嵌式
        head标签内，使用style标签引入css样式
        但是没达到结构与样式完整分离，毕竟还是写在html中
        style的type属性目前唯一值为text/css,即css
    3、外链式（最常用）
        在head标签，使用link标签引入外部独立css文件。css文件不能使用数字开头
        href表示链接，rel表示这个东西与页面的关系，type表示类型为css
        <link href="./CSS/style1.css" rel="stylesheet" type="text/css">
        使用link，css文件和html文件是并行下载的
    4、导入式
        在style标签内，使用@import url(css路径)引入外部独立css文件
        坏处：先加载html，再加载css文件
        <style type="text/css"> 
            @import url("./CSS/style1.css");
        </style>
        还可以在css文件中导入其它的css，语法相同
            在css文件中，@import url("其它css路径");
    5、优先级：就近原则
        这也是层叠性体现，不同的引入方式，通过同样的选择器设置相同的样式，根据我们设置样式的距离，决定渲染的最终结果
        即后面的样式覆盖前面的样式
三、选择器：看书！
    用于筛选符合条件的标签
    1、基本选择器
        通配符选择器
            因为通配符选择器给所有的样式全改了，所以基本只拿来清空
            作用：快速清空默认样式
        标签选择器
            最基本的选择器，直接拿标签来选择，不论嵌套多少层都能发现
            作用：定义默认样式！
        类选择器
            通过元素上面的class值，可以选中类名相同的元素。
            .类名{

            }
            一个class属性值可以有多个，每个值之间用空格隔开
            class="man teacher"
            原子类：一个类选择器，只定义一条样式
            可以选择多个类
            .parent.teacher{
                color:red;
            }
        id选择器
            一个id只能出现一次，所以一个id选择器只能选择一个样式
            id属性命名：字母开头，驼峰命名，可以有数字下划线
            #id{
                color:red;
            }
        层叠式样式：比如同时用id选择器和标签选择器，那么样式会叠加在一起，都生效，如果样式重了就就近

        一般工作中，类选择器是写css样式的，id选择器是给js用的。
    2、高级选择器
        1、后代选择器
            父 子 孙子 ...{
                样式：样式值
            }
            div strong{
                color:red;
            }
            div下的strong全部被选中，不论藏得多深嵌套多严重

            div p strong{

            }
        2、交集选择器
            选中两个选择器都拥有的元素
            书写：很简单，多个选择器一起写，每空格
            div.parent#male{

            }
            div标签且类名为parent且id为male的元素

            标签名只能出现一次，并且写在最前面
        3、并集选择器
            选中多个元素，用逗号隔开
            div,p,span{

            }
            选中div，p和span标签
            .parent,p,#child{

            }
            类为parent，标签p，id为child的元素
    4、书写规范
        用4个空格缩进
        选择器与{}之前价格空格
        样式:+空格+值
            color: red;,上面写的不对
四、继承性重点
    1、概念：在css中，有一些属性，如果给父元素设置了，那么它的后代元素都将继承这个属性
        如p、h3标签，可以从它的祖先元素中继承了文字的属性，没有继承盒子的属性
            只有文字的属性能够继承，盒子的属性不能被继承
            文字属性：color，font-系列，line-系列，text-系列
            盒子属性：background-系列，width、height、border-系列，浮动定位等
        通过控制台查看继承的属性：Elements面板=
        css的继承性是一个很好的语言特性，可以简化css代码
五、权重
    1、权值：选择器的针对性越强，权值月高
        权重：!important无穷大>行内style属性1000>id100>类|伪类|属性10>标签元素1>继承、通配符0.1
    2、权重：对选择器组合后权值求和，权重越高使用样式的优先级越大
        计算方法：比较id、类、标签的数量，依次比较，如果id的数量越多，就权重最大，如果id的数量相同，在看类以此类推
        权重相同：就近
    3、!important 直接写在css样式后面，来提高权重
        只针对单个css属性，不针对选择器
        如果选中了元素，权重最高
        如果没选中，不影响就近原则
        如果在多个选择器中使用，会受到选择器权重影响，即某个选择器权重高某个样式加了important，下面另一个权重低的选择器某个样式加了important，会显示权重高的那个important样式
        div{
            color: red!important;
        }
六、层叠性：多组选择器的样式可以作用在同一个元素上 贼重要！！！！！！！！！！！！  
    如果选中了这个元素，计算选择器的权重。
    如果没有选中元素，看继承性。
        注：如果没有选中，也有权重，权重为0不能进行权重比较。
        比较的是选择器里目标元素的距离，距离近的就是我们继承的属性
    如果没有选中目标元素，样式靠继承，继承遵循就近原则，距离不同，谁离目标元素进，选谁的。
    如果距离相同，就需要再次比较权重，权重高的是被选择
        距离相同，权重相同，谁写在最后面听谁的就近原则。 
    要是并集选择器，需要拆开看，因为并集其实就相当于把俩选择器放一起写了。

七、颜色表示法
    1、十六进制#000000
        每两个数表示一个颜色，前俩红，中间绿，最后蓝
        0-15
        十进制0-255对应十六进制00-FF
        #000000黑色 #FFFFFF白色
        #FF000000红 #00FF00绿 #0000FF蓝

        选择器{
            color: #FF0000;
        }
    2、rgb表示法
        rgb(r,g,b) 其中r，g，b是0-255的数字，也可以用百分比表示
        选择器{
            color: rgb(0,255,0);
        }
        选择器{
            color: rgb(0,100%,0);
        }
        注意：百分比表示法兼容性不好，不建议使用

八、文字样式
    1、color 文字颜色，上面颜色表示法
    2、font-size 设置字体大小，large larger small smaller medium
        也可以用100px、em、rem
        font-size是符合属性，单一属性书写时注意横线连接
    3、font-family 字体，翻书
        选择器{
            font-family: "幼圆","宋体";//后面的代表前面没有选择后面的，可以写多个 
            font-size: large;
        }
        html,body{
            font-family: "楷体"; 代表把默认字体从宋体改成楷体了
        }
    3、font-style 设置字体风格属性样式，属性值可以是italic斜体、normal
    4、font-weight 加粗和size一样可以用单词，也可以用数字，建议用单词(bold，bolder，normal等)
    5、line-height 设置行高，属性值可以是单位值、百分比、倍数，包含文字的一个高度
    6、font 复合属性 通过一个属性设置所有属性
        顺序：-style -variant(可选) -weight -size/line-height font-family
        例：font:italic bold 12px/30px "宋体" sans-serif;
    7、font-variant:不常用 small-caps，将字母转成大写字母，但是是小一号的大写字母，首字母除外
    

九、文本
    1、text-decoration 文本修饰相关属性样式，如underline下划线，上划线，删除线，清除文本样式none 等
    2、text-indent：首行缩进，2em：表示与字号相关的，缩进两个字，和字大小无关
    3、text-align 设置文本的水平对齐方式 left right center justify(分散对齐)
    4、letter-spacing 字符间的空白 10px
    5、word-spcaing 单词与单词之间的空白
    6、vertical-align 设置同一行内级元素垂直对其方式，实行可以是关键字middle top bottom还可以是像素值
        比如p标签内有文字+图片，可以这样设置对其方式，比如middle，文字会出现在图片的中间对其
        默认是基线对其，图片和英文的基线(比如g，圆圈下方是基线，尾巴在基线下)
    7、white-space 指定元素诶的空白怎样处理，normal 空白忽略， pre 空白保留，nowrap 文本不会换行 pre-wrap 空白保留正常换行 pre-line 合并空白，保留换行符
        注：这里面的换行指的是，文本超出边界的自动换行，不是回车键
    8、text-overflow 当文本溢出包含元素是发生的事情，clip修剪文本，ellipsis 显示省略号  
        搭配white-space处理换行，overflow：hidden 超出部分隐藏，不然会超出文本框
    
    文本相关的属性全部可以继承！文字样式和文本样式都可以继承
    针对div设置文本属性，处理，那么p也会改变样式的 
    <div class="ickt">
        <p>hello</p>
    </div>

    案例设置css样式实现截字功能
        1、设置容器宽度 width
        2、设置white-space，拒绝自动换行
        3、设置text-overflow 实现对超出文本的修饰
        4、设置overflow:hidden，隐藏溢出
十、列表样式
    1、list-style-type 设置列表项目符号类型
        circle 空心圆
        老多了超级多，什么甲乙丙丁韩语都行  
    2、list-style-image url图片路径 设置列表项目符号为图片
        选择器{
            list-style-image: url("路径");
        }
    3、list-style-position inside|ouside 设置列表符号的位置
    4、list-style 以上几种属性的简写方式

十一、盒模型，可以用来对元素进行布局
    margin外边距  
    border边框
    padding内边距
    content内容
    1、分类：标准盒模型与怪异(IE)盒模型(IE低版本浏览器下回自动呈现)
    CSS3中定义盒子模型类型属性
        box-sizing:content-box内容盒|border-box边框盒
        内容盒：设置的width、height属性为内容的宽高
        边框盒：设置的width、height属性为边框以内相关盒子属性的宽高
        width 设置盒子的宽度
        height 设置盒子的高度
    标准盒模型：元素的高度和宽度：content|width|height+border+padding+margin
        即width和height是内容的宽高
    怪异盒模型：元素的宽度和高度：width|height(content+border+padding)+margin
        即width和height是border+padding+content的宽高
    2、元素宽高
        左右留白：网站左侧内边距是固定的内容在右侧甩出的空白不一样，可以给定一个足够宽度，只设置左边的内边距，右边空白区域自动剩余
        实际工作中，不设置高度，高度用内部的内容“撑开”。避免后期问题
        自动撑高并不代表所有情况

    3、margin 同级元素之间的距离，或者距离父元素之间的距离
        1、设置分类
            1、单值：margin:10px 上下左右外边距全是10px
            2、二值：10px 20px；上下外边距10，左右20
            3、三值：10px 20px 30px 设置上10，左右20，下30
            4、四值：10 20 30 40 上10 右20 下30 左40
            5、margin-top 设置上
            6、-right -bottom -left 右，下，左
        2、margin塌陷
                同级元素分别设置了上下外边距，两个盒子之间的外边距会产生合并（塌陷），之间的距离以
            设置的margin-bottom（上盒子）或margin-top(下盒子)的值中交大的那个为准
                存在嵌套关系的元素，父盒子在不设置padding、border、overflow等属性的情况下，会出现外边距合并(塌陷)的问题，嵌套关系
            的元素如果同时设置了上下外边距以最大的那个为准，但是父元素存在上述三个属性之一，就不会出现传递情况

            左右不会合并，塌陷这个词用的好，只有上下才能塌
    
    4、border 用来设置盒子的边框
        三种设置方式
            1、按照方向设置border-top，-buttom,-left,-right和margin一样
            2、按照属性类型
                1、border-style 设置边框的线型，solid实线，dashed虚线，dotted点线等
                2、border-width 设置边框的厚度，像素值或 thick 粗线，thin细线，medium中等
                3、border-colo 设置边框的颜色
                简写“border:style width color
                border: 1px solid blue; 1px宽，实线，蓝
                border-top: 20px dashed green; 上边界线20px宽，虚线，绿 

                注：在box里设置background背景色，是设置到边框的，可以看到如果边框选择虚线，露出来的颜色是背景色
    
    5、padding 内边距，边框与内容之间的填充部分
        padding设置分类
            1、单值 padding:10px上下左右
            2、二值：
            3、三值
            4、四值：和margin相同
            5、padding-top，-bottom，-left，-right
    注：padding和margin都可以设置百分比，但是参考的是父元素的宽度设置!记住是宽度!

十二、标准文档流！重点！
    类似word文档，书写内容必须在光标位置书写，光标位置受前面元素影响，前面字号变大，图片变大，逛遍会往下移动，光标和文字图片最下方对齐
    word是标准文档流，书写必须从上到下，从左到右
    网页制作的时候，web制作也是标准文档流，必须从上往下制作
    1、特征：空白折叠、高矮不齐时底边对齐、文本的内容如果超过了盒子宽度会自动换行 
    2、标准文档流将所有的标签区分成了两种：块级和行内级
        块级：所有的容器级标签都是块，p也是
        行内级：除了p之外的文本级标签
        html中标签分类：容器级和文本级
        标准文档流标签分类：块和行内
        p标签单独记忆

        1、块级元素性质：
            1、可以设置宽高，有换行符
                容器默认独占一行
                    如果设置了宽高，那么容器范围为设置宽高的大小，但还是具有换行效果
                    如果没设置宽度，会自动盛满父亲，父级的100%
                如果非块级元素，想要设置为块级元素：display:block
                div h1-h6 p
        2、行内元素的性质
            1、不可以设置宽高，与其它行内级元素在同一行内从左到右依次排列
            2、容器默认包裹内容，宽度由内容撑开
            3、行内元素设置的margin、padding上下不生效（不占位置，但是背景颜色能呈现），左右生效
            4、如果费行内元素，想要设置称为行内元素：display:inline;
            span a time label
        3、行内块
            1、可以设置宽高，与其它行内级元素在同一行内从左到右依次排列
            2、容器默认包裹内容，如果设置了宽高，那么容器范围为设置宽高的大小
            3、如果非行内块元素，想要设置为行内块元素：display：inline-block
                目前学过的：img textarea input等
                
        经常将div转成行内块，即能设置长宽高，还能挤在一行
十三、隐藏元素
    css中，
    display:none 设置元素消失不占位
           :hidden 设置元素消失但是占位
    opcity:0-1 设置元素的不透明度为0 元素消失，占位 
    实用：比如有一栏：精选，社会，娱乐，生活，点开其中一个下面都会显示新闻，可以利用js，从社会切换到娱乐时社会的就隐藏，但是不能删除，因为还要切换回来

十四、居中
    1、单行文本在盒子中垂直居中
        text-line:center
    2、多行文本在盒子中垂直居中，盒子不给高度，用父盒子上下padding挤出来
    3、文本水平方向居中
        line-height: 和height相同
    4、盒子在父盒子内水平居中
        子盒子：margin:auto水平居中
    5、盒子在父盒子内垂直居中
        不给父盒子设置高度，用子盒子的高度撑开，给父盒子设置同样的上下边距padding
    
    骚操作！用表格就好啦，设置th、td align="center"
        全能居中！
        表格在居中这一块相当吊，文本，多行文本，行内元素span，块元素div，行内块img，全都行
        建议使用
十五、浮动 面试重点
    浮动模型：不同于标准流，元素挨着元素进行排列
    浮动的元素都脱离了标准文档流，不再占用原来的位置
    浮动出现的初衷是为了解决文字环绕的效果（内容让出浮动部分，但是元素没有让出）
        解读：图片+文字，给图片浮动效果，f12点文字部分发现，元素还是占了那么大一行，但是图片占用的地方并没有内容
    属性float可以设置元素的浮动效果，
        left：左浮动
        right：右
        none:默认不浮动（即标准流）
    1、浮动特征：
        1、浮动可以使元素从左到右紧密排列
        2、浮动的元素具有块级元素的特点（可以设置宽高margin padding生效，但是没换行）
        3、浮动后的元素不存在上下外边距合并问题
            上面外边距是10，下面上边距是10，那么上下边距就是20，不会是10 
        4、浮动的元素脱离了文档流，不再占有原来的位置
            比如例子中，前三个box设置了浮动，第456没设置就自动顶到前面的位置了
        5、一个元素设置浮动后，其它同级的元素都要设置浮动
        6、元素设置浮动后，原有的自适应占父元素的百分百宽度变为包裹内容的宽度
            解析：设置了浮动，一旦取消它的宽度，它不会再像之前的容器一样充满父元素的宽度，它只以内容的宽度作为宽度
        7、元素设置浮动后，会影响后面元素的布局，所以设置浮动后一定要及时清除，清除浮动的属性：clear：left|right|both

        8、浮动的元素塌陷问题
            上面提到，在父元素不设置高度的情况下，嵌套的子元素如果都设置了浮动，会呈现出父元素塌陷的效果
            （父元素不设置高度需要子元素撑起来，而浮动不占用原来的位置会塌陷）
            需要解决这个问题，解决方案
                1、给父元素设置高度，这种方式在确定高度的情况下可以使用，但是很多时候，容器都是由内容撑起来的，所以根据内容
                    的多少并不号控制这个高度
                2、外墙法：在父元素的后面设置父元素的一个同级别空元素（div），设置清除浮动，这种方式需要添加过多的空元素
                    增加结构代码量，并且我们完全可以在后面那个同级父元素上直接清除浮动
                3、内墙法：在父元素内部后面，添加一个空的子元素div，设置清除浮动，问题同外墙法类似，但是解决了外墙法不能解决
                    的父元素塌陷问题，相对于给父元素设置高度的不确定性，这种方式直接撑起父元素的高度
                4、将父元素设置浮动，后面元素清除浮动
                5、父元素设置行内块元素：display：inline-block；达不到想要的布局效果，因为行内块与其它行内元素都是并列紧挨着的
                    display:inline-block 创建bfc
                6、父元素设置overflow属性：
                    属性值可以是hidden auto scroll 
                    overflow属性本身是用来解决内容溢出元素的处理方式
                    hidden代表溢出隐藏
                    auto溢出自适应（没溢出无滚动条，溢出后有滚动条）
                    scroll不管出不出现溢出，都有滚动条
                    默认visible，溢出可以看到，不能解决父元素塌陷。
                    https://www.jianshu.com/p/7e04ed3f4bea
                    解释为什么overflow：hidden能清除浮动影响（BFC）overflow的值不为visible；时会创建bfc
                    BFC计算高度时浮动元素也参与计算，因此父元素在计算其高度时，加入了浮动元素的高度，“顺便”达成了清除浮动的目标，所以父元素就包裹住了子元素
                    缺点：虽然创建bfc，但是overflow的每一个属性都不咋地：一个hidden，剩下的出滚动条，都会影响页面
                7、伪元素清除浮动：将伪元素插入到容器元素最后面，代替内墙法中插入的元素，并为伪元素清除浮动（要设置块元素），很简单  
                    .list:after{
                        content: "";
                        clear: both;
                        display: block;
                        缺点：不能复用！
                    }
                8、clearfix类：工作中，我们常常将清除浮动的功能封装在一个clear类中，这样容器元素设置该类，就可以清除浮动，
                这种方式可以复用，因此工作中很常见

十六、伪元素
    不是写在页面中的元素，伪元素用于创建一些不在文档树中的元素并为其添加样式，比如我们可以通过：before来在一个元素
    前加一些文本，并为这些文本添加样式，虽然用户可以看到这些文本，但是这些文本实际上不在文档树中
    css2.1提供了两个伪元素
    :before 在元素前面插入文本
    :after  在元素后面插入文本
    注意：伪元素必须设置content样式，否则伪元素不会生效
    /* 伪元素在html代码中看不见，只能在css中添加 */
        h1::before{
            /* 必须设置content属性，即伪元素内容 */
            content: "我是伪元素";
            /* 可以设置各种格式属性 */
            font-size: 60px;
            display: block;
            color: bisque;
        } 
十七、伪类
    伪类用于当已有元素处于某个状态时，为其添加对应的样式，这个状态时根据用户行为而动态变化的
    比如当用户悬停在指定元素时，我们可以通过:hover来描述这个元素的状态，虽然它和普通的css类似，可以为
    已有的元素添加样式，但是它只有处于dom树无法描述的状态才能为伪元素添加样式，所以称为伪类
        ：focus{样式：样式值} 获取焦点；表单控件中使用
    1、伪类和伪元素都不会出现在dom树上，都是通过css来添加的
    2、伪类允许出现在选择器的任何位置，而一个伪元素只能跟在选择器的最后一个简单选择器后面
    3、伪元素名和伪类名都是大小写不敏感的
    4、有些伪类互斥，而其他的都可以同时作用在一个元素上
    5、伪类的操作对象是文档树的已有元素，伪元素创建了一个文档树外的一个元素
    6、伪类是类，伪元素是元素，权值不同

    7、a标签的伪类
        1、:link[样式：样式值]初始状态；必须是第一次访问或者清除历史记录的访问
        2、：visited。。f访问后的状态
        3、hover 鼠标悬停滑过的效果
        4、active 激活状态
        使用顺序：l-v-h-a lovehate爱恨准则

十八、浮动元素与行内块元素
    默认盒子会按照顺序排列，如果盒子前面有兄弟，就紧贴，如果没有，就贴在父元素的边上
    如果一行容不下钙元素，自动进到下一行，然后渲染，就是说向下找，如果发现一行能容下它
    就会渲染，即使上边有多余的空隙，他也不会钻进去，所以说他受到前面元素的影响
    举例
    |11222333 |
    |11222333 |
    |11   333 |
    |11       |
    |11       |
    这时有一个44 要渲染，它不会钻进11和333中间的位置，相反它会进入下一行
            44
    |11222333 |
    |11222333 |
    |11   333 |
    |1144     |
    |1144     |
    因为它要跨过3这个大块

    注意！行内块和浮动元素不同，行内块一行挤在一起，但是一旦放不下了，就另起最新一行排列
    |11222333 |
    |11222333 |
    |11   333 |
    |11       |
    |11       |
    |44       |
    |44       |
    也就是说，行内元素保证了对元素的有序排序，浮动元素纯贴边

十九、margin对元素宽度的影响    
    如果块元素没有设置宽度按，默认宽度就是父容器的宽度
    如果我们修改margin，盒子的宽度会变化吗？
        在没有设置子盒子宽度的情况下，修改margin会影响盒子的宽度
            margin-left -right设置正值，盒子宽度减小，即父盒子若是1000，子盒子宽度也1000，但是子设置了100的-left，那么宽度就变成了900
                                  负值，盒子宽度增加，即父盒子若是1000，子盒子宽度也1000，但是子设置了-100的-left，那么宽度就变成了1100
        如果子盒子设置了宽度，不论咋改，盒子宽度都不会变了，但是位置会变化，而且-left改变位置的优先级高于-right改变位置优先级

二十、margin对浮动元素的影响
    对于标准文档流来说，块元素占满整行，因此设置他们的水平方向margin，不会影响后面的元素
    margin是相对于原有位置移动的
    如果让盒子浮动（即贴合在一起），此时对盒子设置边距会影响后面的元素，前面元素位置不受影响（浮动贴边的特性）不管你设置的间距是正还是负
        1、如果浮动的盒子通过margin移动，是受前面元素影响的，那么盒子移动的距离就是前面所有盒子移动的距离，
            即一个挤一个，1234，我移动2，1不受影响，34跟着2全移动
        2、如果将盒子2移动到盒子1前面，移动的距离与盒子1移动的距离无关，与盒子1及盒子2的宽度有关，
            原理：盒子2特么贴着盒子1啊！你盒子1移动到哪里去盒子2都贴着！
        3、当盒子2移动到盒子1前面，盒子3就贴盒子1的边（如果盒子13没设置边距的话）
        4、2成立的条件：盒子1左右平移不可以超过盒子1的宽度，移多了就不成立了，可能1移多了还能跑到2的前面去
        
         